a [options]
b [options]
...
..


bits:
2 - 1
3 - 7
4 - 4
5 - 3,2,5
6 - 0,6,9
7 - 8

9 -> &4
0 -> &7
6 -> what's left

3 -> &7
5 -> 9&
2 -> what's left



if one shot, then for each letterin in abc, remove any letters from [] optios which aren't in possibles

for multiple options, that's next?


a set(['a', 'c', 'b', 'e', 'd', 'g', 'f'])
c set(['c', 'b', 'd', 'f'])
b set(['c', 'f'])
e set(['c', 'f'])
d set(['a', 'c', 'f'])
g set(['c', 'b', 'd', 'f'])
f set(['a', 'c', 'b', 'e', 'd', 'g', 'f'])


smallest sets, permultations:
b = c
a set(['b', 'e', 'd', 'g'])
b set(['c'])
c set(['b', 'd'])
d set(['a'])
e set(['f'])
f set(['b', 'e', 'd', 'g'])
g set(['b', 'd'])
-> c = d
a set(['e', 'g'])
c set(['d'])
b set(['c'])
e set(['f'])
d set(['a'])
g set(['b'])
f set(['e', 'g'])
=> a = e
a set(['e'])
b set(['c'])
c set(['d'])
d set(['a'])
e set(['f'])
f set(['g'])
g set(['b'])
=> a = g
a set(['g'])
b set(['c'])
c set(['d'])
d set(['a'])
e set(['f'])
f set(['e'])
g set(['b'])
>gcdafeb
-> c = b
a set(['e', 'g'])
c set(['b'])
b set(['c'])
e set(['f'])
d set(['a'])
g set(['d'])
f set(['e', 'g'])
=> a = e
a set(['e'])
b set(['c'])
c set(['b'])
d set(['a'])
e set(['f'])
f set(['g'])
g set(['d'])
>ecbafgd
=> a = g
a set(['g'])
b set(['c'])
c set(['b'])
d set(['a'])
e set(['f'])
f set(['e'])
g set(['d'])
>gcbafed
b = f
a set(['b', 'e', 'd', 'g'])
c set(['b', 'd'])
b set(['f'])
e set(['c'])
d set(['a'])
g set(['b', 'd'])
f set(['b', 'e', 'd', 'g'])
c->b
a set(['e', 'g'])
c set(['b'])
b set(['f'])
e set(['c'])
d set(['a'])
g set(['d'])
f set(['e', 'g'])
a => e
a set(['e'])
b set(['f'])
c set(['b'])
d set(['a'])
e set(['c'])
f set(['g'])
g set(['d'])
>efbacgd
a => g
a set(['g'])
b set(['f'])
c set(['b'])
d set(['a'])
e set(['c'])
f set(['e'])
g set(['d'])
>gfbaced
c->d
a set(['e','g'])
c set(['d'])
b set(['f'])
e set(['c'])
d set(['a'])
g set(['b'])
f set(['e', 'g'])

a => e
a set(['e'])
b set(['f'])
c set(['d'])
d set(['a'])
e set(['c'])
f set(['g'])
g set(['b'])
>efdacgb
a => g
a set(['g'])
b set(['f'])
c set(['d'])
d set(['a'])
e set(['c'])
f set(['e'])
g set(['b'])
>gfdaceb

0abc efg  1110111
1  c  f   0010010
2a cde g  1011101
3a cd fg  1011011
4 bcd f   0111010
5ab d fg  1101011
6ab defg  1101111
7a c  f   1010010
8abcdefg  1111111
9abcd fg  1111011

Solutions:
[abcdefg]
>ecdafgb
>gcdafeb
>ecbafgd
>gcbafed
>efbacgd
>gfbaced
>efdacgb


('be cfbegad cbdgef fgaecd cgeb fdcge agebfd fecdb fabcd edb', 'fdgacbe cefdb cefbgd gcbe')
  01 08      0|6|9  0|6|9  04   2|3|5 0|6|9  2|3|5 2|3|5 7


be   = 0010010
edb  = 1010010
cgeb = 0111010


cdbgef includes cgeb!
0      1110111 && cgeb => FALSE
6      1101111 && cgeb => FALSE
9      1111011 && cgeb => TRUE


[abcdefg]
>ecdafgb => bcgfae => 1110111 => 0
>gcdafeb => bcgafe => 1110111 => 0
>ecbafgd => bgcfae => 1110111 => 0
>gcbafed => 1110111
>efbacgd => 1110111
>gfbaced => 1110111
>efdacgb => 1110111

fgaecd
[abcdefg]
>ecdafgb => efdabc => 1111110 => XXX
>gcdafeb => eadfbc => 1111110 => XXX
>ecbafgd => efdabg => 1101111 => 6
>gcbafed => 
>efbacgd => 
>gfbaced => 
>efdacgb => 

