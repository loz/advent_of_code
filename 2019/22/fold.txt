example:

CUT -10
DWI 3


card = c
cards = k

cut: (c - -10) % k
dwi: (c * 3) % k

folded = (((c + 10) % k) * 3) % k

say c= 8, k = 11
c' = 18 % 11 -> 7   * 3 % 11 -> 10

((x % n) * y) % n === (x*y) % n

folded = (3c + 30) % k
dns: (-1 - card)
(-1 - (3c + 30) -> -1 - 3c + -1 - 30
(-3c -1 -30 - 1) -> (-3c -32)
e.g. c = 3
(-1 - (9 + 30) -> (-1 - 9) + (-1 - 30)  -> -10 + -31 -> -41
- 9 - 32 -> 41 :D

dns: (-1 - card) % mod
dns: ((-1 * card) - 1) % mod

say c= 8, k = 11
c' = 24 + 30 -> 54 % k -> 10
c'' = 30 + 30 -> 60 % k -> 5

Theory??
cut -> dwi twice ===   dwi(dwi)( (cut(cut)(c) )

NO is the answer





cut(cut)
((c + 10) % k) + 10 %k
-> (c + 10 + 10) % k

dwi(dwi)
(((c * 3) % k) * 3) % k
-> (c * 3 * 3) -> 9c
c'  8 * 3 -> 24 % 11 -> 2
c'' 2 * 3 -> 6  % 11 -> 6 :)

say c = 8, k = 11
c' = ((8 + 20) % 11) -> 6  :)
     (6 * 9) % 11 -> -> 10 :(

Hand-roll
c'    8 + 10 % 11 -> 7
c''   7 * 3 -> 21 % 11 -> 10
c'''  10 + 10 % 11 -> 9
c'''' 9 * 3 -> 27 % 11 -> 5


cut: (c - -10) % k
dwi: (c * 3) % k
dwi: (c * 7) % k
       (((c + 10) * 3) * 7)
        ( (3c + 30) * 7)
        ( (21c + 210))

c'   8 + 10 -> 18 % 11 -> 7
c''  7 * 3 -> 21 -> 10
c''' 10 * 7 -> 70 -> 4

(21 * 8) + 210 -> 378 ->  4 :D
(10 * 8) + 1 -> 81 -> 4 :D




folded = (a * c) + b ->

fold(fold)  (2 *)
      (a * ((ac) +  b) + b)
       (aa * c) + ab + b

#<Func:0x105109b40 @of_c=2018, @plus_n=329, @mod=10007>
 a = 2018, n = 329

 2020 once  -> (2018 * 2020) + 329 -> 3840
 2020 twice -> (2018 * 3840) + 329 -> 4031
 
      (2018 * 2018 * 2020) + (2018 * 329) + 329 -> 4021 :D


