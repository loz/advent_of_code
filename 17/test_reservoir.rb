require 'minitest/autorun'
require_relative './reservoir'

describe Reservoir do
  before do
    @reservoir = Reservoir.new
    @example = <<-EOF
x=495, y=2..7
y=7, x=495..501
x=501, y=3..7
x=498, y=2..4
x=506, y=1..2
x=498, y=10..13
x=504, y=10..13
y=13, x=498..504
      EOF
  end

  describe "Water" do
    before do
      @example.each_line { |l| @reservoir.mark_vein(l)}
    end

    it "flows down" do
      w = Water.new()
      7.times { w.flow(@reservoir) }

      render = @reservoir.render_at(494,14,14)

      #puts "*"*20
      #puts @reservoir.colorize(render)
      #puts "*"*20

      render.must_equal <<-EOF
......+.......
......|.....#.
.#..#.|.....#.
.#..#.|#......
.#..#.|#......
.#....|#......
.#....|#......
.#######......
..............
..............
....#.....#...
....#.....#...
....#.....#...
....#######...
      EOF

    end

    it "flows correctly in multiple directions" do
      reservoir = Reservoir.new
      veins = <<-EOF
x=500, y=2
x=496..504, y=8
x=496, y=5..7
x=504, y=5..7
      EOF
      veins.each_line do |vein|
        reservoir.mark_vein(vein) 
      end

      w = Water.new()
      40.times { w.flow(reservoir) }


      render = reservoir.render_at(494,14,14)
      #puts "*"*20
      #puts reservoir.colorize(render)
      #puts "*"*20

      render.must_equal <<-EOF
......+.......
.....|||......
.....|#|......
.....|.|......
.|||||||||||..
.|#~~~~~~~#|..
.|#~~~~~~~#|..
.|#~~~~~~~#|..
.*#########*..
..............
..............
..............
..............
..............
      EOF

    end

    it "rests correctly in lob-sided wells" do
      reservoir = Reservoir.new
      veins = <<-EOF
x=499..500, y=4
x=499, y=3
x=497..503, y=6
x=497, y=3..5
x=503, y=3..5
x=494..507, y=13
x=494, y=10..12
x=507, y=9..12
      EOF
      veins.each_line do |vein|
        reservoir.mark_vein(vein) 
      end

      w = Water.new()
      100.times { w.flow(reservoir) }

      render = reservoir.render_at(494,14,14)
      puts "*"*20
      puts reservoir.colorize(render)
      puts "*"*20

      render.must_equal <<-EOF
......+.......
......|.......
..|||||||||...
..|#~#~~~#|...
..|#~##~~#|...
..|#~~~~~#|...
..|#######|...
..|.......|...
..|.......|...
|||||||||||||#
#~~~~~~~~~~~~#
#~~~~~~~~~~~~#
#~~~~~~~~~~~~#
##############
      EOF
      w.complete?.must_equal true
    end

    it "flows correctly around objects inside wells" do
      reservoir = Reservoir.new
      veins = <<-EOF
x=500, y=2
x=498..500, y=6
x=496..504, y=8
x=496, y=5..7
x=504, y=5..7
      EOF
      veins.each_line do |vein|
        reservoir.mark_vein(vein) 
      end

      w = Water.new()
      30.times { w.flow(reservoir) }


      render = reservoir.render_at(494,14,14)
      #puts "*"*20
      #puts reservoir.colorize(render)
      #puts "*"*20

      render.must_equal <<-EOF
......+.......
.....|||......
.....|#|......
.....|.|......
.|||||||||||..
.|#~~~~~~~#|..
.|#~###~~~#|..
.|#~~~~~~~#|..
.*#########*..
..............
..............
..............
..............
..............
      EOF

    end

    it "flows left when it cannot flow down" do
      w = Water.new()
      8.times { w.flow(@reservoir) }

      render = @reservoir.render_at(494,14,14)

      #puts "*"*20
      #puts @reservoir.colorize(render)
      #puts "*"*20

      render.must_equal <<-EOF
......+.......
......|.....#.
.#..#.|.....#.
.#..#.|#......
.#..#.|#......
.#....|#......
.#...||#......
.#######......
..............
..............
....#.....#...
....#.....#...
....#.....#...
....#######...
      EOF
    end

    it "flows right when it cannot flow down" do
      w = Water.new()
      22.times { w.flow(@reservoir) }

      render = @reservoir.render_at(494,14,14)

      #puts "*"*20
      #puts @reservoir.colorize(render)
      #puts "*"*20

      render.must_equal <<-EOF
......+.......
......|.....#.
.#..#|||....#.
.#..#~~#......
.#..#~~#......
.#~~~~~#......
.#~~~~~#......
.#######......
..............
..............
....#.....#...
....#.....#...
....#.....#...
....#######...
      EOF
    end

    it "rests if it cannot flow" do
      w = Water.new()
      11.times { w.flow(@reservoir) }

      render = @reservoir.render_at(494,14,14)

      #puts "*"*20
      #puts @reservoir.colorize(render)
      #puts "*"*20

      render.must_equal <<-EOF
......+.......
......|.....#.
.#..#.|.....#.
.#..#.|#......
.#..#.|#......
.#....|#......
.#~~~~~#......
.#######......
..............
..............
....#.....#...
....#.....#...
....#.....#...
....#######...
      EOF
    end

    it "detects complete flow" do
      w = Water.new()
      render = @reservoir.render_at(494,14)

      53.times { w.flow(@reservoir) }

      w.complete?.must_equal false

      w.flow(@reservoir)

      render = @reservoir.render_at(494,14)

      #puts "*"*20
      #puts @reservoir.colorize(render)
      #puts "*"*20

      render.must_equal <<-EOF
......+.......
......|.....#.
.#..#||||...#.
.#..#~~#|.....
.#..#~~#|.....
.#~~~~~#|.....
.#~~~~~#|.....
.#######|.....
........|.....
...|||||||||..
...|#~~~~~#|..
...|#~~~~~#|..
...|#~~~~~#|..
...*#######*..
      EOF

      w.complete?.must_equal true
    end
  end
  
  describe "mark_vein" do
    it "records veins vertically" do
      @reservoir.mark_vein("x=495, y=2..7")
      render = @reservoir.render_at(494,14,10)

      render.must_equal <<-EOF
......+.......
..............
.#............
.#............
.#............
.#............
.#............
.#............
..............
..............
      EOF
    end
    
    it "records veins in example" do
      @example.each_line { |l| @reservoir.mark_vein(l)}
      render = @reservoir.render_at(494,14,14)

      #puts "*"*20
      #puts @reservoir.colorize(render)
      #puts "*"*20

      render.must_equal <<-EOF
......+.......
............#.
.#..#.......#.
.#..#..#......
.#..#..#......
.#.....#......
.#.....#......
.#######......
..............
..............
....#.....#...
....#.....#...
....#.....#...
....#######...
      EOF
    end
  end
end
